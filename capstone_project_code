#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
char *expr;  // Pointer to input expression
// Function to fetch the next token
char getToken() {
    while (*expr == ' ') expr++;  // Skip spaces
    return *expr;
}
// Function to match and consume a token
void match(char expected) {
    if (getToken() == expected) expr++;
    else {
        printf("Syntax Error: Unexpected character '%c'\n", *expr);
        exit(1);
    }
}
// Forward declarations of parsing functions
int exprParser();  
int termParser();
int factorParser();
// Recursive function for parsing expressions (handles + and -)
int exprParser() {
    int result = termParser();
    while (getToken() == '+' || getToken() == '-') {
        char op = getToken();
        match(op);
        int right = termParser();
        if (op == '+') result += right;
        else result -= right;
    }
    return result;
}
// Recursive function for parsing terms (handles * and /)
int termParser() {
    int result = factorParser();
    while (getToken() == '*' || getToken() == '/') {
        char op = getToken();
        match(op);
        int right = factorParser();
        if (op == '*') result *= right;
        else if (right != 0) result /= right;
        else {
            printf("Math Error: Division by zero\n");
            exit(1);
        }
    }
    return result;
}

// Recursive function for parsing factors (handles numbers and parentheses)
int factorParser() {
    int result = 0;
    if (isdigit(getToken())) {  
        while (isdigit(getToken())) {
            result = result * 10 + (*expr - '0');
            expr++;
        }
    } else if (getToken() == '(') {  
        match('(');
        result = exprParser();
        match(')');
    } else {
        printf("Syntax Error: Unexpected character '%c'\n", *expr);
        exit(1);
    }
    return result;
}

// Function to evaluate an expression
int evaluateExpression(char *input) {
    expr = input;
    int result = exprParser();
    if (*expr != '\0') {
        printf("Syntax Error: Unexpected character '%c'\n", *expr);
        exit(1);
    }
    return result;
}
// Main function
int main() {
    char input[100];

    printf("Enter a mathematical expression: ");
    fgets(input, sizeof(input), stdin);

    // Remove trailing newline character from fgets()
    char *newline = strchr(input, '\n');
    if (newline) *newline = '\0';

    printf("Result: %d\n", evaluateExpression(input));

    return 0;}
